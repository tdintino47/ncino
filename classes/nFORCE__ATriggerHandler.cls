/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global virtual class ATriggerHandler extends nFORCE.ALifeCycleDataProvider implements nFORCE.IPipelineComponent {
    global ATriggerHandler() {

    }
    global virtual void afterDeleteProxy(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void afterDelete(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void afterInsertProxy(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void afterInsert(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void afterUpdateProxy(List<SObject> newObjs, List<SObject> oldObjs, Set<Id> objIds) {

    }
    global virtual void afterUpdate(List<SObject> newObjs, List<SObject> oldObjs, Set<Id> objIds) {

    }
    global virtual void beforeDeleteProxy(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void beforeDelete(List<SObject> objs, Set<Id> objIds) {

    }
    global virtual void beforeInsertProxy(List<SObject> objs) {

    }
    global virtual void beforeInsert(List<SObject> objs) {

    }
    global virtual void beforeUpdateProxy(List<SObject> newObjs, List<SObject> oldObjs, Set<Id> objIds) {

    }
    global virtual void beforeUpdate(List<SObject> newObjs, List<SObject> oldObjs, Set<Id> objIds) {

    }
    global static void clearTriggerExecutionContext() {

    }
    global virtual void constructSpecific(SObject specific, SObject actual) {

    }
    global virtual System.Type getType() {
        return null;
    }
    global virtual Boolean isDoubleFireSafe() {
        return null;
    }
    global virtual void process(nFORCE.IPipelineContext context) {

    }
    global virtual Boolean shouldExecute(nFORCE.IPipelineContext context) {
        return null;
    }
    global virtual Boolean shouldFailureStopProcessing(nFORCE.IPipelineContext context) {
        return null;
    }
}
